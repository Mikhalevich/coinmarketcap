// Code generated by MockGen. DO NOT EDIT.
// Source: ./cryptocurrency/cryptocurrency.go
//
// Generated by this command:
//
//	mockgen -source=./cryptocurrency/cryptocurrency.go -destination=./cryptocurrency/cryptocurrency_mock.go -package=cryptocurrency
//

// Package cryptocurrency is a generated GoMock package.
package cryptocurrency

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
	isgomock struct{}
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockExecutor) Get(ctx context.Context, path string, preProcessFn func(*http.Request) error) (*QuotesLatestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, path, preProcessFn)
	ret0, _ := ret[0].(*QuotesLatestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExecutorMockRecorder) Get(ctx, path, preProcessFn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExecutor)(nil).Get), ctx, path, preProcessFn)
}
